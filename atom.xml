<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ascetic in the deadlock]]></title>
  <link href="https://sparkbye.github.io/myBlog/atom.xml" rel="self"/>
  <link href="https://sparkbye.github.io/myBlog/"/>
  <updated>2017-05-20T21:18:32+08:00</updated>
  <id>https://sparkbye.github.io/myBlog/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[Block]]></title>
    <link href="https://sparkbye.github.io/myBlog/14950245211652.html"/>
    <updated>2017-05-17T20:35:21+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14950245211652.html</id>
    <content type="html"><![CDATA[
<ul>
<li>Block是一个数据类型；</li>
</ul>

<hr/>

<p>既然block是一个数据类型，那么我们自然可以声明一个block类型的变量，那么block变量中存储的是什么呢？</p>

<hr/>

<blockquote>
<p>block类型的变量中存储的是代码段（可以有参数，可以有返回值）。</p>
</blockquote>

<h3 id="toc_0">如何声明一个block变量</h3>

<pre><code>void (^myBlock1)();
int (^myBlock2)();
int (^myBlock3)(int num1, int num2);
</code></pre>

<h3 id="toc_1">block变量的初始化</h3>

<pre><code>void (^myBlock1)() = ^void(){
        NSLog(@&quot;test&quot;);
    };

int (^myBlock2)() = ^int(){
    int num1 = 10 + 20;
    return num1;
};

int (^myblock3)(int num1, int num2) = ^int(int num1, int num2){
    int num3 = num1 + num2;
    return num3;
};
</code></pre>

<blockquote>
<p>赋值给block变量的代码段必须要符合block变量的要求。</p>
</blockquote>

<pre><code>#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {
    
    void (^myBlock1)();
    myBlock1 = ^void(){
        NSLog(@&quot;test&quot;);
    };
    myBlock1();
    
    int (^myBlock2)() = ^int(){
        int num1 = 10 + 20;
        return num1;
    };
    int sum = myBlock2();
    NSLog(@&quot;sum = %d&quot;, sum);
    
    int (^myblock3)(int num1, int num2) = ^int(int num1, int num2){
        int num3 = num1 + num2;
        return num3;
    };
    
    int res = myblock3(10, 100);
    NSLog(@&quot;res = %d&quot;, res);
    
    
    return 0;
}
</code></pre>

<h3 id="toc_2">block的简写</h3>

<ol>
<li>如果代码段没有返回值，那么代码段的void可以省略：</li>
</ol>

<pre><code>//既没有参数也没有返回值的，void和（）都可以省略
void (^myBlock1)() = ^(){
        NSLog(@&quot;test&quot;);
    };
</code></pre>

<ol>
<li>如果代码段没有参数，代码段的（）也可以省略：</li>
</ol>

<pre><code>int (^myBlock2)() = ^int{
    int num1 = 10 + 20;
    return num1;
};
</code></pre>

<ol>
<li> 如果有指定参数，可以只写参数类型而不写参数名称：</li>
</ol>

<pre><code>int (^myblock3)(int, int) = ^int(int num1, int num2){
    int num3 = num1 + num2;
    return num3;
};
</code></pre>

<ol>
<li><p>无论代码段是否有返回值，在写代码段的时候可以不写返回值的类型：</p></li>
</ol>

<ul>
<li>如果代码段省略了返回值，系统会自动确定返回值的类型</li>
<li>如果代码段有返回值，return的数据是什么类型，系统就会认为代码段是什么类型；</li>
</ul>

<pre><code>int (^myBlock4)(int, int) = ^(int num1, int num2){
    int num3 = num1 + num2;
    return num3;
};
    
int result = myBlock4(20, 30);
NSLog(@&quot;result is %d&quot;, result);
</code></pre>

<h3 id="toc_3">简化block的定义</h3>

<ol>
<li>typedef: 将block定义为一个短类型。</li>
</ol>

<pre><code>typedef void (^NewType)();
NewType block1 = ^void(){
    NSLog(@&quot;Hello&quot;);
};
block1();
</code></pre>

<ul>
<li>block内部可以取外部的局部变量和全局变量的值</li>
<li>block内部可以修改全部变量的值，但是无法修改外部局部变量的值</li>
<li>如果需要修改，则局部变量定义方式为__block int num = 100;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[继承与多态]]></title>
    <link href="https://sparkbye.github.io/myBlog/14896702983964.html"/>
    <updated>2017-03-16T21:18:18+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14896702983964.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">static关键字</h3>

<ol>
<li><p>C语言中的static</p>

<ul>
<li>修饰局部变量</li>
<li>修饰全局变量</li>
<li>修饰函数</li>
</ul></li>
<li><p>OC中的static关键字</p>

<ul>
<li>static不能修饰属性，也不能修饰方法</li>
<li>static可以修饰方法中的局部变量</li>
</ul>

<p>如果方法中的局部变量被static修饰，那么这个变量就会变成静态变量，存储在常量区，当方法执行完毕不会被回收。下次再执行这个方法的时候，直接使用而不用再次声明。<br/>
<img src="media/14896702983964/14896706781899.jpg" alt=""/></p>

<ul>
<li>如果方法的返回值是当前类的对象，那么方法的返回值就写为instanceType</li>
</ul></li>
<li><p>什么时候用到static<br/>
<img src="media/14896702983964/14896717656421.jpg" alt=""/></p></li>
</ol>

<h3 id="toc_1">self关键字</h3>

<ul>
<li>self是一个指针；</li>
<li>在对象方法中self指向当前对象；</li>
<li><p>在类方法中self指向当前类；</p></li>
<li><p>作用：</p>

<ul>
<li>可以显式的访问当前对象的属性； self -&gt; 属性</li>
<li>可以使用self来调用当前对象的其他的对象方法；</li>
</ul></li>
</ul>

<h3 id="toc_2">私有属性和私有方法</h3>

<ul>
<li>将属性定义在@implementation之中和将属性定义在@interface之中并标记为@private唯一的区别： 提示和不提示</li>
<li>都不能被外界访问</li>
<li>方法不写声明，只写实现，那么这个方法就是一个私有方法；</li>
<li>私有方法只能在本类的其他方法中调用，不能被外界调用</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类方法与对象方法]]></title>
    <link href="https://sparkbye.github.io/myBlog/14885942470746.html"/>
    <updated>2017-03-04T10:24:07+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14885942470746.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">对象方法</h4>

<ul>
<li>调用：如果想要调用对象方法就必须先创建对象，通过对象名来调用</li>
<li>声明：使用‘-’号</li>
</ul>

<h4 id="toc_1">类方法</h4>

<ul>
<li>调用：类方法的调用不依赖于对象，如果要调用类方法，不需要去创建对象，直接通过类名来调用。</li>
<li>声明：使用‘+’号</li>
<li>在类方法中不能直接访问属性</li>
<li>属性是在对象创建的时候，跟随着对象一起创建在对象之中</li>
<li>类第一次被访问的时候，会做类加载，是把类的带啊存储在代码段</li>
<li>节约空间，提高效率</li>
<li>如果方法不需要直接访问属性，也不需要直接调用其他的对象方法，则可以定义为类方法</li>
</ul>

<h4 id="toc_2">类方法规范</h4>

<ul>
<li>如果写一个类，可以为这个类提供一个和类同名的类方法；</li>
</ul>

<h4 id="toc_3">NSString最常用的类方法</h4>

<p>instanceType 作为返回值 代表返回的是当前类的对象<br/>
<img src="media/14885942470746/14888085422135.jpg" alt=""/><br/>
<img src="media/14885942470746/14888090342021.jpg" alt=""/></p>

<h4 id="toc_4">NSString最常用的对象方法</h4>

<p><img src="media/14885942470746/14888092424014.jpg" alt=""/><br/>
<img src="media/14885942470746/14888094300096.jpg" alt=""/><br/>
<img src="media/14885942470746/14888095451151.jpg" alt=""/><br/>
<img src="media/14885942470746/14888099962376.jpg" alt=""/><br/>
<img src="media/14885942470746/14888102494936.jpg" alt=""/><br/>
<img src="media/14885942470746/14892006938627.jpg" alt=""/><br/>
<img src="media/14885942470746/14892007099870.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对象与方法]]></title>
    <link href="https://sparkbye.github.io/myBlog/14879879409983.html"/>
    <updated>2017-02-25T09:59:00+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14879879409983.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">分组导航标记</h4>

<p>标记：<br/>
<code># pragma mark XXXX</code><br/>
分割线：<br/>
<code># pragma mark -</code></p>

<h4 id="toc_1">类的本质</h4>

<ul>
<li>类的本质是我们自定义的一个<strong>数据类型</strong></li>
<li>类可以作为方法的参数:<code>- (void) test : (Dog *)Dog;</code></li>
<li>一个target钟的类无法直接在另外一个target钟访问；</li>
<li>类的属性代表这个类所拥有的东西；</li>
<li>类的方法代表该类所具备的行为和功能；</li>
</ul>

<h4 id="toc_2">对象作为类的属性</h4>

<p><img src="media/14879879409983/14880765155478.jpg" alt=""/></p>

<ul>
<li>属性的本质是变量；</li>
<li>在创建对象的时候，对象中的属性是按照类模板中个规定所创建出来的；</li>
<li>注意_dog是指针变量；如果对象的属性是另一个类的对象，这个属性仅仅是一个指针变量，并没有对象产生；
<img src="media/14879879409983/14880768553779.jpg" alt=""/>
<img src="media/14879879409983/14880772940474.jpg" alt=""/>
如果要再方法中调用当前对象的另一个方法 <code>[self 方法名]</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nil和NULL]]></title>
    <link href="https://sparkbye.github.io/myBlog/14878614535108.html"/>
    <updated>2017-02-23T22:50:53+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14878614535108.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">NULL</h4>

<ul>
<li>NULL可以作为指针变量的值；</li>
<li>如果一个指针变量的值是NULL值代表这个指针不指向内存中的任何一个空间；</li>
<li>NULL 其实是一个宏</li>
</ul>

<blockquote>
<p>#define NULL ((void *)0)</p>
</blockquote>

<h4 id="toc_1">nil</h4>

<ul>
<li>nil只能作为指针变量的值，代表指针变量不指向内存中的任何一个空间；</li>
<li>nil也是一个宏；</li>
<li>NULL和nil其实是一样的；
<img src="media/14878614535108/14878622149842.jpg" alt=""/>
<img src="media/14878614535108/14878623109287.jpg" alt=""/></li>
<li>一般C指针用NULL，OC的类指针用nil；</li>
</ul>

<blockquote>
<p>如果一个类指针的值为nil，那么通过指针去访问该指针指向的对象的属性，运行会报错；<br/>
该指针去访问指针指向的对象的方法，运行不会报错，但是不会去执行；</p>
</blockquote>

<p><img src="media/14878614535108/14878633255069.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类、对象和方法]]></title>
    <link href="https://sparkbye.github.io/myBlog/14848362414368.html"/>
    <updated>2017-01-19T22:30:41+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14848362414368.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">对象在内存中式如何存储的</h2>

<h4 id="toc_1">内存中的五大区域：</h4>

<ol>
<li>堆： 程序员手动申请的字节空间： malloc calloc</li>
<li>栈： 存储局部变量</li>
<li>BSS段： 存储未被初始化的全部变量 静态变量</li>
<li>数据段(常量区)： 存储已被初始化的全局 静态变量，常量</li>
<li>代码段： 存储程序的代码</li>
</ol>

<h4 id="toc_2">类加载</h4>

<ol>
<li>在创建对象的时候， 肯定是需要访问类的</li>
<li>声明一个类的指针变量也会访问类的</li>
<li>在程序运行期间，当某个类第一次被访问的时候，会将这个类存储到内存中的代码段区域，这个过程叫做类加载。</li>
<li>直到程序结束的时候才会被释放。</li>
</ol>

<h4 id="toc_3">对象在内存中的存储</h4>

<p>假设写在函数当中：<br/>
Person *p1 = [Person new];</p>

<ol>
<li>Person * p1 : 会在栈内存中申请一块空间，在栈内存中声明一个Person类型的指针变量p1(指针变量只能存储地址);</li>
<li>[Person new]: 真正在内存中创建对象的其实是这段代码;</li>
<li><p>new做的事情：</p></li>
</ol>

<ul>
<li>     在堆内存中申请一块合适大小的空间;</li>
<li>     在这个空间根据类的模板创建对象;</li>
<li>     类模板中定义了什么属性，就把这些属性依次声明在对象之中</li>
<li>     对象中还有另一个属性，叫做isa，这是一个指针，指向对象所属的类在代码段中的地址。</li>
<li>     初始化对象的属性：
    如果属性的类型是基本数据类型，那么就赋值0；<br/>
    如果属性的类型是C语言的指针类型，那么就赋值为NULL；<br/>
    如果属性的类型是OC的类指针类型，那么就赋值为nil</li>
</ul>

<p><img src="media/14848362414368/14876872482687.jpg" alt=""/></p>

<ul>
<li>     返回对象的地址</li>
</ul>

<p><img src="media/14848362414368/14876857739160.jpg" alt=""/></p>

<p>代码中的检测：<br/>
<img src="media/14848362414368/14876858990226.jpg" alt=""/></p>

<h4 id="toc_4">注意</h4>

<p>对象里面只有属性，没有方法(自己类的属性 + isa)；</p>

<p>如何访问对象的属性？</p>

<ul>
<li>  指针名-&gt;属性名；</li>
<li>  根据指针 找到指针指向的对象 再找到对象中的属性来访问；</li>
</ul>

<p>如何调用方法？</p>

<ul>
<li>  先根据指针名找到对象，对象发现要调用方法，在根据对象的isa指针找到类，然后调用类里面的方法；</li>
</ul>

<h4 id="toc_5">问题</h4>

<p>为什么不把方法存储在对象之中？  </p>

<ul>
<li>因为每一个对象的方法的代码实现都是一样的，没有必要为每一个对象都保存一个方法。
<img src="media/14848362414368/14876867543683.jpg" alt=""/></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 编程]]></title>
    <link href="https://sparkbye.github.io/myBlog/14848334530232.html"/>
    <updated>2017-01-19T21:44:13+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14848334530232.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>断断续续学习了好久的OC，一直没有提高，现在才完完全全信服了好记性不如烂笔头，今天开始坚持好好记录自己的学习过程，争取今年能上线一个自己满意的App，加油！</p>
</blockquote>

<h3 id="toc_0">1.最简单的一个例子</h3>

<pre><code>1. #import &lt;Foundation/Foundation.h&gt;
2. int main(int argc, const char *argv[])
3. {
4.     @autoreleasepool{
5.         NSLog(@&quot;Programming is fun!&quot;);
6.     }
7.     return 0;
8. }
</code></pre>

<ul>
<li class="task-list-item"><input disabled="disabled" type="checkbox" /> Objective C中，大小写是区分的；
</li>
<li class="task-list-item"><input disabled="disabled" type="checkbox" /> 编程时要养成插入注释的习惯；
</li>
</ul>

<h3 id="toc_1">2.程序解释</h3>

<p>第1行：程序告诉编译器找到并处理名为Foundation.h的文件；<br/>
第2行：指定程序的名称为main<br/>
问题：<br/>
<code>int argc, const char *argv[]</code>如何理解？<br/>
第4行：自动释放池；它的机制是：它使得应用在创建新对象时，系统能够有效地管理应用所使用的内存。<br/>
第5行：指定要调用名为NSLog的<strong>函数</strong><br/>
此处的@符号在位于一对双引号的字符串前面，这称为<strong>常量NSString对象</strong><br/>
第7行：表示要终止main的执行并返回一个状态值0；</p>

<h3 id="toc_2">3.练习</h3>

<h4 id="toc_3">第2题：</h4>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
int main (int argc, const char * argv[])
{
    @autoreleasepool {
        NSLog(@&quot;In Objective-C, lowercase letters are significant.\nmain is where program execution begins.\nOpen and closed braces enclose program statements in a routine.\nAll program statements must be terminated by a semicolon.&quot;);
    }
    return 0;
}
</code></pre>

<h4 id="toc_4">第3题：</h4>

<pre><code>返回:
Testing...
....1
...2
..3
</code></pre>

<h4 id="toc_5">第4题：</h4>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
int main (int argc, const char * argv[])
{
    @autoreleasepool{
        result = 87 - 15;
        NSLog(@&quot;The result is %i&quot;, result);
    }
    return 0;
}
</code></pre>

<h4 id="toc_6">第5题：</h4>

<pre><code>1. INT 改为int；
2. sum计算缺少；号；
3. NSLog要用“”号；
4. sum前缺少，号；
</code></pre>

<h4 id="toc_7">第6题：</h4>

<p><code>输出结果为：95</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[导航条navbar]]></title>
    <link href="https://sparkbye.github.io/myBlog/14841396902336.html"/>
    <updated>2017-01-11T21:01:30+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14841396902336.html</id>
    <content type="html"><![CDATA[
<ol>
<li>navbar有<strong>背景色</strong></li>
<li>navbar可以是<strong>纯链接</strong>，也可以是<strong>表单</strong></li>
<li>navbar可以是表单和导航一起结合</li>
</ol>

<p>LESS版本：对应源文件navbar.less<br/>
Sass版本：对应元文件navbar.scss</p>

<h2 id="toc_0">基本导航条</h2>

<p>基本导航条分为两个步骤：<br/>
1. 制作导航的列表（<code>&lt;ul class=“navbar”&gt;</code>）基础上添上类名“navbar-nav”<br/>
2. 列表外部添加一个容器（div），使用类名“navbar”和“navbar-default”</p>

<p>“.navbar”样式主要功能：<br/>
* 设置左右padding<br/>
* 圆角</p>

<p>导航条的颜色是通过“.navbar-default”来控制，颜色和其他样式是通过配合父容器“navbar-default”来一起实现。</p>

<h2 id="toc_1">为导航条增加标题</h2>

<ol>
<li>navbar-header</li>
<li>navbar-brand</li>
</ol>

<h2 id="toc_2">带表单的导航条</h2>

<p>在navbar容器中放置一个带有navbar-form类名的表单。</p>

<pre><code>&lt;form action=&quot;##&quot; class=&quot;navbar-form navbar-left&quot; rol=&quot;search&quot;&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请输入关键词&quot; /&gt;
    &lt;/div&gt;
    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;搜索&lt;/button&gt;
&lt;/form&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Study_1]]></title>
    <link href="https://sparkbye.github.io/myBlog/14834488859095.html"/>
    <updated>2017-01-03T21:08:05+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14834488859095.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">What is Bootstrap</h2>

<ul>
<li>Free front-end framework </li>
<li>Includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals and many other.</li>
</ul>

<h3 id="toc_1">Containers</h3>

<ul>
<li>The <em>.container</em> class provides a responsive fixed width container</li>
<li>The <em>.container-fluid</em> class provides a full width container, spanning the entire width of the viewport</li>
</ul>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;title&gt;Bootstrap Example&lt;/title&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class=&quot;container&quot;&gt;
  &lt;h1&gt;My First Bootstrap Page&lt;/h1&gt;
  &lt;p&gt;This is some text.&lt;/p&gt; 
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3 id="toc_2">Grid classes</h3>

<p>The Bootstrap grid system has four classes:<br/>
* xs (for phones)<br/>
* sm (for tablets)<br/>
* md (for desktops)<br/>
* lg (for larger desktops)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Basic]]></title>
    <link href="https://sparkbye.github.io/myBlog/14832356716225.html"/>
    <updated>2017-01-01T09:54:31+08:00</updated>
    <id>https://sparkbye.github.io/myBlog/14832356716225.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">基本的HTML模板</h2>

<ul>
<li>bootstrap模板为使IE6、7、8兼容， 需要引用下面的代码：</li>
</ul>

<pre><code>&lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt;
</code></pre>

<ul>
<li>为使IE6、7、8兼容css3样式，需要引用下面的代码：</li>
</ul>

<pre><code>&lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
</code></pre>

<ul>
<li>如果要使用Bootstrap的js插件，需要先调入jquery</li>
</ul>

<pre><code>&lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
</code></pre>

<h2 id="toc_1">全局样式</h2>

]]></content>
  </entry>
  
</feed>
